{"version":3,"sources":["components/Formulario.js","components/Citas.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","handleCitas","useState","mascota","dueno","fecha","sintomas","citas","setCitas","updateCitas","e","target","name","value","error","setError","onSubmit","preventDefault","count","Object","values","forEach","element","setTimeout","id","Math","random","toFixed","type","className","placeholder","onChange","Citas","cita","eliminarCita","onClick","App","key","nuevoListado","listadoCitas","filter","borrar","setListadoCitas","ls","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","length","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.121b1275.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\n\nconst Formulario = ({handleCitas}) => {\n\n     //Campos formulario\n     const [citas, setCitas] = useState({\n        mascota: '',\n        dueno: '',\n        fecha: '',\n        sintomas: ''\n    });\n\n    let {mascota, dueno, fecha, sintomas} = citas;\n\n// State citas\n    const updateCitas = e => {\n        setCitas({\n            ...citas,\n            [e.target.name] : e.target.value\n        });\n    }\n\n// State error\n    const [error, setError] = useState(false);\n\n    const validaForm = e => {\n        e.preventDefault();\n\n    //Validar campos\n        let count = 0;\n        Object.values(citas).forEach(element => {\n            if( element !== \"\"){\n                count++;\n            }\n        });\n\n        if( count !== 4 ){\n            mostrarError();\n            return;\n        }\n\n        //Asignar id\n        citas.id = (Math.random() * 100).toFixed();\n\n        // Agregar cita a local storage\n        handleCitas(citas);\n\n        //Reiniciar formulario\n        setCitas({\n            mascota: '',\n            dueno: '',\n            fecha: '',\n            sintomas: ''\n        });\n    }\n\n    function mostrarError(){\n        setError(true);\n        setTimeout( () => {\n            setError(false);\n        }, 2500);\n    }\n\n    \n\n    return ( \n        <Fragment>\n            <h2>Agrega una cita</h2>\n            <form\n                onSubmit={ validaForm }\n            >\n                <label>Nombre de la mascota</label>\n                <input \n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre de la mascota\"\n                    onChange={updateCitas}\n                    value={mascota}\n                />\n\n                <label>Nombre del dueño</label>\n                <input \n                    type=\"text\"\n                    name=\"dueno\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre del dueño\"\n                    onChange={updateCitas}\n                    value={dueno}\n                />\n\n                <label>Fecha de la cita</label>\n                <input \n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre de la mascota\"\n                    onChange={updateCitas}\n                    value={fecha}\n                />\n\n                <label>Síntomas</label>\n                <textarea\n                    name=\"sintomas\"\n                    className=\"u-full-width\"\n                    onChange={updateCitas}\n                    value={sintomas}\n                ></textarea>\n\n                <button \n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >Enviar</button>\n                \n                {   error \n                    ?<p>Todos los campos son obligatorios</p>\n                    :null\n                }\n            </form>\n        </Fragment>\n     );\n}\n \nexport default Formulario;","import React, {Fragment} from 'react';\n\nconst Citas = ({cita, eliminarCita}) => {\n\n    return (\n        <Fragment>\n            <div className=\"cita animated fadeIn fast\">\n                <h4>Mascota: {cita.mascota}</h4>\n                <p>Dueño: {cita.dueno}</p>\n                <p>Fecha: {cita.fecha}</p>\n                <p>Síntomas: {cita.sintomas}</p>\n                <button\n                className=\"button eliminar u-full-width\"\n                    onClick={ () => {eliminarCita(cita.id) }}\n                >Eliminar cita</button>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default Citas;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Citas from './components/Citas';\n\nfunction App() {\n\n  const eliminarCita = key =>{\n    let nuevoListado = listadoCitas.filter( borrar => borrar.id !== key );\n    setListadoCitas(nuevoListado)\n  }\n\n  //Verificar datos en local storage\n  let ls = JSON.parse(localStorage.getItem('citas'));\n  if (!ls) {\n    ls = [];\n  }\n\n  const [listadoCitas, setListadoCitas] = useState(ls);\n\n  const handleCitas = citas => {\n    setListadoCitas([\n      ...listadoCitas,\n      citas\n    ]);\n  }\n \n\n  useEffect( () => {\n    localStorage.setItem('citas', JSON.stringify(listadoCitas));\n  }, [listadoCitas])\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"one-half column\">\n          <Formulario \n            handleCitas={handleCitas}\n          />\n        </div>\n        <div className=\"one-half column\">\n          {listadoCitas.length === 0 \n            ? <h2>Crea una cita</h2>\n            : <h2>Administra tus citas</h2>\n          }\n          {listadoCitas.map( cita => (\n            <Citas \n              key={Math.random()}\n              cita={cita}\n              eliminarCita={eliminarCita}\n            />\n          ))}\n          \n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}